module pa2;

import java.io.*;
import java.util.*;
import java.lang.Math; 

/* Node.salsa
 *
 * Handles the creation of new nodes
 *
*/

behavior Node{
    Map keyVals = new HashMap();
    Vector connections;
    int index;
    int numNodes;

    Node(int nodeIndex) {
        connections = new Vector();
        index = nodeIndex;
    }

    String getVal(String key) {
        if (keyVals.containsKey(key)) {
            return (String) keyVals.get(key);
        }
        try {
            standardOutput <- println("Sleep");
            Thread.sleep(500);
        } catch (Exception except) {
            // Waiting for key
        }
        return (String) getVal(key);
    }

    Vector getConnections() {
        return connections;
    }

    void setConnections(int numNodes, int n) {
        this.numNodes = numNodes;
        for (int i = 0; i < n; i++) {
            connections.add((index + (int) Math.pow(2,i)) % numNodes);
        }
    }

    int insert(int target, String aKey, String aValue){
        int next_ind = nextIndex(target);
        //its us
        if (next_ind < 0){
            keyVals.put(aKey, aValue);
            return -1;
        }
        //otherwise let someone else do it
        else{
            return (int)connections.get(next_ind);
        }
    }

    int query(int target){
        int next_ind = nextIndex(target);
        return (int)connections.get(next_ind);
        
    }

    int nextIndex(int nodeid){
        if (nodeid == index){
            return -1;
        }
        else if (nodeid > index){
            return (int)(Math.log(nodeid-index)/Math.log(2));
        }
        else {
            return (int)(Math.log(nodeid-index+numNodes)/Math.log(2));
        }
    }
}